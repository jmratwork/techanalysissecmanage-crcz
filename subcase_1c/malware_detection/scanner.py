"""Utilities for scanning files using YARA rules and ClamAV."""

from __future__ import annotations

import json
import subprocess
from pathlib import Path
from typing import Dict, List

import yara


class MalwareScanner:
    """Scan files for malicious content using YARA and ClamAV."""

    def __init__(self, rules_path: Path) -> None:
        """Compile YARA rules from the provided path."""
        self.rules = yara.compile(filepath=str(rules_path))

    def scan_with_yara(self, file_path: Path) -> List[str]:
        """Return a list of matched YARA rule names."""
        matches = self.rules.match(str(file_path))
        return [match.rule for match in matches]

    def scan_with_clamav(self, file_path: Path) -> str:
        """Run ClamAV (clamscan) on the file and return the result string."""
        try:
            proc = subprocess.run(
                ["clamscan", "--no-summary", str(file_path)],
                capture_output=True,
                text=True,
                check=False,
            )
        except FileNotFoundError:
            return "clamscan not found"

        if proc.returncode == 0:
            return "OK"
        if proc.returncode == 1:
            return proc.stdout.strip()
        return f"ERROR: {proc.stderr.strip()}"

    def scan(self, file_path: Path) -> Dict[str, object]:
        """Scan a file with YARA and ClamAV returning a report dictionary."""
        return {
            "file": str(file_path),
            "yara_matches": self.scan_with_yara(file_path),
            "clamav": self.scan_with_clamav(file_path),
        }

    def generate_report(self, file_path: Path, report_path: Path) -> Dict[str, object]:
        """Generate a JSON report for the scan results."""
        results = self.scan(file_path)
        report_path.write_text(json.dumps(results, indent=2))
        return results
