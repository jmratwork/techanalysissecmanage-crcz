import json
from pathlib import Path
import sys
import unittest
from unittest import mock

sys.path.append(str(Path(__file__).resolve().parents[2]))
from malware_detection.scanner import MalwareScanner


class ScannerTests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        base = Path(__file__).resolve().parent
        cls.data_dir = base / "data"
        rules_path = base.parent / "rules" / "example.yar"
        cls.scanner = MalwareScanner(rules_path)
        cls.benign = cls.data_dir / "benign.txt"
        cls.malicious = cls.data_dir / "malicious.txt"

    def test_yara_benign(self):
        self.assertEqual(self.scanner.scan_with_yara(self.benign), [])

    def test_yara_malicious(self):
        self.assertEqual(self.scanner.scan_with_yara(self.malicious), ["MALWARE_TEST"])

    def test_clamav_parsing(self):
        fake = mock.Mock(returncode=1, stdout="malicious.txt: Eicar-Test-Signature FOUND\n", stderr="")
        with mock.patch("subprocess.run", return_value=fake):
            result = self.scanner.scan_with_clamav(self.malicious)
        self.assertIn("FOUND", result)

    def test_generate_report(self):
        report_file = self.data_dir / "report.json"
        result = self.scanner.generate_report(self.malicious, report_file)
        self.assertTrue(report_file.exists())
        loaded = json.loads(report_file.read_text())
        self.assertEqual(result, loaded)
        report_file.unlink()


if __name__ == "__main__":
    unittest.main()
