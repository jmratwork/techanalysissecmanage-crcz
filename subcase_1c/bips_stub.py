#!/usr/bin/env python3
"""Minimal BIPS stub to forward simulator events to NG-SIEM.

This stub listens for HTTP beacons generated by the benign malware
simulator. Each request results in a JSON log entry and a syslog message
for ingestion by NG-SIEM. No ML processing is performed.
"""
from __future__ import annotations

import json
import os
import sys
from http.server import BaseHTTPRequestHandler, HTTPServer
from pathlib import Path
from urllib.parse import parse_qs, urlparse

sys.path.append(str(Path(__file__).resolve().parents[1]))
from soc_alerts.notifier import Notifier
from soc_alerts.service import AlertService

LOG_FILE = Path("/var/log/bips/alerts.json")


class BeaconHandler(BaseHTTPRequestHandler):
    notifier = Notifier({"method": "syslog"})
    service = AlertService(notifier)

    def do_GET(self) -> None:  # noqa: D401 - inherited docstring
        parsed = urlparse(self.path)
        params = parse_qs(parsed.query)
        beacon = params.get("beacon", ["0"])[0]
        timestamp = params.get("time", [""])[0]
        record = {
            "beacon": beacon,
            "timestamp": timestamp,
            "src_ip": self.client_address[0],
        }
        LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
        with LOG_FILE.open("a") as handle:
            handle.write(json.dumps(record) + "\n")
        self.service.handle_event("bips_stub", f"beacon_{beacon}", record["src_ip"])
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"ok")

    def log_message(self, format: str, *args: object) -> None:  # noqa: D401
        """Suppress default logging."""
        return


def main() -> None:
    port = int(os.environ.get("BIPS_PORT", "5500"))
    server = HTTPServer(("", port), BeaconHandler)
    server.serve_forever()


if __name__ == "__main__":
    main()
